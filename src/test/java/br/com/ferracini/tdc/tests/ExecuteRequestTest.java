/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package br.com.ferracini.tdc.tests;

import br.com.ferracini.tdc.provider.PostRequestDataTest;
import br.com.ferracini.tdc.provider.RequestDataTest;
import io.qameta.allure.Feature;
import io.restassured.RestAssured;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Order;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.aggregator.ArgumentsAccessor;
import org.junit.jupiter.params.provider.CsvFileSource;

import static io.restassured.RestAssured.given;
import static org.hamcrest.CoreMatchers.equalTo;
import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.MatcherAssert.assertThat;
import static org.junit.jupiter.api.Assertions.assertAll;
import static org.junit.jupiter.api.Assertions.assertEquals;

@Feature("Execute request")
@DisplayName("Execute request test should")
class ExecuteRequestTest {

    static final String BASE_URL = "https://httpbin.org";

    @BeforeAll
    static void setup() {
        RestAssured.baseURI = BASE_URL;
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
    }

    @Order(1)
    @DisplayName(value = "check server response ")
    @ParameterizedTest(name = "{0},{2},{4}")
    @CsvFileSource(resources = "/cenarios.csv", numLinesToSkip = 1)
    void checkServerResponse(ArgumentsAccessor data) {

        var dataTest = new RequestDataTest(data);

        var response = given()
                .when()
                .request(dataTest.method(), dataTest.path() + "/" + dataTest.param())
                .then()
                .extract()
                .response();


        assertEquals(dataTest.statusCode(), response.statusCode());
    }

    @DisplayName(value = "check post server response ")
    @ParameterizedTest(name = "{0},{2},{4}")
    @CsvFileSource(resources = "/cenarios-post.csv", numLinesToSkip = 1)
    void checkPostServerResponse(ArgumentsAccessor data) {

        var dataTest = new PostRequestDataTest(data);

        var response = given()
                .body(dataTest.param())
                .when()
                .request(dataTest.method(), dataTest.path())
                .then()
                .extract()
                .response();

        var responseMessage = response.jsonPath().get(dataTest.jsonPath());

        assertAll(dataTest.scenario(),
                () -> assertThat(response.statusCode(), is(equalTo(dataTest.statusCode()))),
                () -> assertThat(responseMessage, is(equalTo(dataTest.expectedMessage())))
        );
    }
}
